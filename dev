#!/bin/bash
# Developer tools

# Create the Python virtual environment used for development
run_env() {
   deactivate 2>/dev/null  # just in case a virtual environment is active

   if [ $# -gt 0 ] && [ $1 == "rebuild" ]; then
      if [ -d .python ]; then
         echo "Rebuilding virtual environment from scratch..."
         rm -rf .python
      else
         echo "Creating virtual environment..."
      fi
   else
      if [ -d .python ]; then
         echo "Updating virtual environment..."
      else
         echo "Creating virtual environment..."
      fi
   fi

   virtualenv --quiet --download .python
   source .python/bin/activate

   VERSION=`python version.py`
   DEPENDENCIES=`python dependencies.py`

   echo "Installing dependencies for $VERSION:"
   echo "$DEPENDENCIES"
   pip install --quiet $DEPENDENCIES
}

# Run the unit tests
run_test() {
   source .python/bin/activate
   PYTHONPATH=src/ pytest $* unittest
}

# Run the unit tests with coverage
run_coverage() {
   source .python/bin/activate
   PYTHONPATH=src/ coverage run --rcfile=.coveragerc -m pytest $*
   coverage report -m
}

# Run the Tox suite with all of the relevant Python versions
run_tox() {
   source .python/bin/activate
   tox -e "clean,{py37,py38}-{coverage,nocoverage},report"
   coverage report -m
}

# Run the pylint checker
run_pylint() {
   source .python/bin/activate
   pylint --rcfile=.pylintrc $(find src -name "*.py") $(find unittest -name "*.py")
}

# Render a board via the render script
run_render() {
   source .python/bin/activate
   PYTHONPATH=src/ src/scripts/render
}

# Run one of the developer tools
case $1 in
   env)
      shift 1
      run_env $*
      ;;
   test)
      shift 1
      run_test $*
      ;;
   coverage)
      shift 1
      run_coverage $*
      ;;
   tox)
      run_tox
      ;;
   pylint)
      run_pylint
      ;;
   render)
      run_render
      ;;
   *)
      echo "Unknown command $1"
      exit 1
esac

